SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2EM0MZGYW
[CLASS] control
[BASECLASS] control
[OBJNAME] peme_sfsplitter
[START PROPERTIES]
BackColor = 192,192,192
BackStyle = 1
BorderColor = 255,0,0
BorderWidth = 2
Height = 248
Name = "peme_sfsplitter"
Width = 25
cobject1name = 
cobject2name = 
ctooltiptextdownarrow = 
ctooltiptextleftarrow = 
ctooltiptextrightarrow = 
ctooltiptextuparrow = 
lcollapsed = .F.
lcollapsible = .F.
linitialized = .F.
lsaveanchor = .F.
lshowgripper = .T.
nanchor = 0
nobject1minsize = 0
nobject2minsize = 0
noriginalminimum = X
nsavedanchor = 0
[END PROPERTIES]
[START PROTECTED]
getobject1size
getobject2size
getobjectnames
getposition
moveobject1
moveobject2
setposition
[END PROTECTED]
[START METHODS]
PROCEDURE Init
* Make the border invisible and flag that Init has fired.

with This
	.BorderWidth  = 0
	.lInitialized = .T.
	.Resize() && Added by Matt Slay - 2008-12-24
endwith
dodefault()

*!*	Other notes regarding changes by Matt Slay 2008-12-24:
*!*  Revised to add dots graphic images on the splitter bar.
*!*	 All changes were to the main sfplitter control only.
*!*	 Added a horizontal and vertical gripper image.
*!*	 Set BackStyle to Opaque.
*!*	 Set BackColor to 192,192,192
*!*	 Added code to the Resize() event to keep the Grippers centered and hide/show the correct
*!*	 gripper image for vertical vs. horizontal splitters
*!*	 Images pick up ToolTip from parent sfsplitter in gripper.MouseEnter() event.
*!*	 Images pass their MouseMove() event to parent sfsplitter.MouseMove() event.
*!*	 Added a property to the sfplitter base class called lShowGripper that let's you turn it on
*!*	 or off for each instance of splitter in you app. The default is .T.
*!*	 So, the gripper graphics are color matched to the 192,192,192.
*!*	 Any change of the spliiter BackColor would require making new Gripper images with the matching
*!*	 colors. Not hard to do.

If PEME_IsVersion9()
	This.Anchor = this.nAnchor 
EndIf 

ENDPROC
PROCEDURE MouseMove
lparameters tnButton, ;
	tnShift, ;
	tnXCoord, ;
	tnYCoord
local lnPosition
with This
	if tnButton = 1 and .Enabled
		lnPosition = .GetPosition(tnXCoord, tnYCoord)
		.MoveSplitterToPosition(lnPosition)
	endif tnButton = 1 ...
endwith

ENDPROC
PROCEDURE Resize
With This
	*!*		.Collapse (.F.)
	.DrawCollapseArrows()
Endwith

With This.gripperhor
	If PEME_IsVersion9()
		.Anchor=0
		.Left=(This.Width-.Width)/2
		.Top=(This.Height-.Height)/2
		.Anchor=10
	Else
		.Left=(This.Width-.Width)/2
		.Top=(This.Height-.Height)/2
	Endif
	.Visible=(This.Width>This.Height) And This.lShowGripper=.T.
Endwith


With This.gripperver
	If PEME_IsVersion9()
		.Anchor=0
		.Top=(This.Height-.Height)/2
		.Left=(This.Width-.Width)/2
		.Anchor=5
	Else
		.Top=(This.Height-.Height)/2
		.Left=(This.Width-.Width)/2
	Endif
	.Visible=(This.Width<This.Height) And This.lShowGripper=.T.
Endwith

DoDefault()

ENDPROC
PROCEDURE collapse
Lparameters lbCollapse


ENDPROC
PROCEDURE drawcollapsearrows
With This.ImgDownArrow
	If PEME_IsVersion9()
		.Anchor=0
		.Left= .Width
		.Top= (This.Height-.Height)/2 - 2
		.Anchor=10
	Else
		.Left=(This.Width-.Width)/2
		.Top=(This.Height-.Height)/2
	Endif
	.Visible=(This.Width>This.Height) And This.lCollapsible and Not This.lCollapsed 
Endwith


With This.ImgUpArrow
	If PEME_IsVersion9()
		.Anchor=0
		.Left= .Width
		.Top= (This.Height-.Height)/2 + 2
		.Anchor=10
	Else
		.Left=(This.Width-.Width)/2
		.Top=(This.Height-.Height)/2
	Endif
	.Visible=(This.Width>This.Height) And This.lCollapsible and This.lCollapsed 
Endwith


****************************************************************
****************************************************************
With This.ImgRightArrow
	If PEME_IsVersion9()
		.Anchor=0
		.Left= (This.Width-.Width)/2 - 2
		.Top= 5
		.Anchor=10
	Else
		.Left= (This.Width-.Width)/2 - 2
		.Top= .Height
	Endif
	.Visible=(This.Width<This.Height) And This.lCollapsible and Not This.lCollapsed 
Endwith


With This.ImgLeftArrow
	If PEME_IsVersion9()
		.Anchor=0
		.Left= (This.Width-.Width)/2 + 1
		.Top= 5
		.Anchor=10
	Else
		.Left= (This.Width-.Width)/2 + 1
		.Top= .Height
	Endif
	.Visible=(This.Width<This.Height) And This.lCollapsible and This.lCollapsed 
Endwith



ENDPROC
PROCEDURE getobject1size
* Abstract method.

lparameters toObject

ENDPROC
PROCEDURE getobject2size
* Abstract method.

lparameters toObject

ENDPROC
PROCEDURE getobjectnames
lparameters tcList, ;
	taArray
local lnOccurs, ;
	lnStart, ;
	lnI, ;
	lnPos
lnOccurs = occurs(',', tcList) + 1
dimension taArray[lnOccurs]
lnStart = 1
for lnI = 1 to lnOccurs
	if lnI = lnOccurs
		lnPos = len(tcList) + 1
	else
		lnPos = at(',', tcList, lnI)
	endif lnI = lnOccurs
	taArray[lnI] = alltrim(substr(tcList, lnStart, lnPos - lnStart))
	lnStart = lnPos + 1
next lnI
return lnOccurs

ENDPROC
PROCEDURE getposition
* Abstract method.

lparameters tnXCoord, ;
	tnYCoord

ENDPROC
PROCEDURE lsaveanchor_assign
lparameters tlSaveAnchor
do case
	Case not PEME_IsVersion9()
	case tlSaveAnchor and This.nSavedAnchor > 0 and This.Anchor = 0
	case tlSaveAnchor
		This.nSavedAnchor = This.Anchor
		This.Anchor       = 0
	otherwise
		This.Anchor = This.nSavedAnchor
endcase

ENDPROC
PROCEDURE moveobject1
* Abstract method.

lparameters toObject

ENDPROC
PROCEDURE moveobject2
* Abstract method.

lparameters toObject

ENDPROC
PROCEDURE movesplittertoposition
* Move the splitter to the specified position. Ensure it doesn't go too far,
* based on the nObject1MinSize and nObject2MinSize settings.

Lparameters tnPosition
Local lnPosition, ;
	laObjects[1], ;
	lnObjects, ;
	lnI, ;
	loObject, ;
	lnAnchor
With This
	lnPosition = tnPosition
	lnObjects  = .GetObjectNames(.cObject1Name, @laObjects)
	For lnI = 1 To lnObjects
		loObject   = Evaluate('.Parent.' + laObjects[lnI])
		lnPosition = Max(lnPosition, .GetObject1Size(loObject))
	Next lnI
	lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
	For lnI = 1 To lnObjects
		loObject   = Evaluate('.Parent.' + laObjects[lnI])
		lnPosition = Min(lnPosition, .GetObject2Size(loObject))
	Next lnI

	.lSaveAnchor = .T.
	.SetPosition(lnPosition)
	.lSaveAnchor = .F.

	* Now move the left and right objects as well.

	lnObjects = .GetObjectNames(.cObject1Name, @laObjects)
	For lnI = 1 To lnObjects
		loObject = Evaluate('.Parent.' + laObjects[lnI])
		With loObject
			.lSaveAnchor = .T.
			This.MoveObject1(loObject)
			.lSaveAnchor = .F.
		Endwith
	Next lnI
	lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
	For lnI = 1 To lnObjects
		loObject = Evaluate('.Parent.' + laObjects[lnI])
		With loObject
			.lSaveAnchor = .T.
			This.MoveObject2(loObject)
			.lSaveAnchor = .F.
		Endwith
	Next lnI

	* Call hook methods.

	.AdjustMinimum()

	.SplitterMoved()
Endwith

ENDPROC
PROCEDURE setposition
* Abstract method.

lparameters tnPosition

ENDPROC
PROCEDURE splittermoved
* Abstract method.

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
7[END RESERVED2]
[START RESERVED3]
*adjustminimum 
*collapse 
*drawcollapsearrows 
*getobject1size Gets the size for Object 1
*getobject2size Gets the size for Object 2
*getobjectnames Populates an array from a comma-delimited list
*getposition Returns the new position: X for a horizontal splitter and Y for a vertical splitter
*lsaveanchor_assign 
*moveobject1 Moves Object 1 to the new position
*moveobject2 Moves Object 2 to the new position
*movesplittertoposition Moves the splitter to the specified position
*setposition Sets the new position for the splitter
*splittermoved Called after the splitter is moved
cobject1name The name of the object above (for a vertical splitter) or to the left of (for a horizontal splitter) the splitter
cobject2name The name of the object below (for a vertical splitter) or to the right of (for a horizontal splitter) the splitter
ctooltiptextdownarrow
ctooltiptextleftarrow
ctooltiptextrightarrow
ctooltiptextuparrow
lcollapsed
lcollapsible
linitialized .T. after the control has been initialized
lsaveanchor
lshowgripper A flag to indicate if you want the Gripiper graphic image to be shown.
nanchor
nobject1minsize The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 1
nobject2minsize The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 2
noriginalminimum
nsavedanchor
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2EM0LKWZR
[CLASS] image
[BASECLASS] image
[OBJNAME] gripperhor
[PARENT] peme_sfsplitter
[START PROPERTIES]
Height = 5
Left = 2
MousePointer = 7
Name = "gripperhor"
Picture = ..\images\gripper_hor.png
Top = 24
Width = 21
[END PROPERTIES]
[START METHODS]
PROCEDURE Init
If PEME_IsVersion9()
	This.Anchor = 10
EndIf 

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.ToolTipText=this.Parent.ToolTipText

ENDPROC
PROCEDURE MouseMove
lparameters tnButton, ;
	tnShift, ;
	tnXCoord, ;
	tnYCoord
local lnPosition

this.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)


ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2EM0LKWZR
[CLASS] image
[BASECLASS] image
[OBJNAME] gripperver
[PARENT] peme_sfsplitter
[START PROPERTIES]
Height = 21
Left = 12
MousePointer = 9
Name = "gripperver"
Picture = ..\images\gripper_ver.png
Top = 108
Width = 5
[END PROPERTIES]
[START METHODS]
PROCEDURE Init
If PEME_IsVersion9()
	This.Anchor = 5
EndIf 

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.ToolTipText=this.Parent.ToolTipText

ENDPROC
PROCEDURE MouseMove
lparameters tnButton, ;
	tnShift, ;
	tnXCoord, ;
	tnYCoord
local lnPosition

this.Parent.MouseMove(tnButton, tnShift, tnXCoord, tnYCoord)


ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2EM0LKWZR
[CLASS] image
[BASECLASS] image
[OBJNAME] imgDownArrow
[PARENT] peme_sfsplitter
[START PROPERTIES]
BackStyle = 0
Height = 21
Left = 2
Name = "imgDownArrow"
Picture = ..\images\dnarrow.bmp
Top = 174
Width = 21
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
With This.Parent
	.Collapse (.T.)
	.Refresh()
EndWith 
ENDPROC
PROCEDURE Init
If PEME_IsVersion9()
	This.Anchor = 5
EndIf 

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.ToolTipText=this.Parent.cToolTipTextDownArrow 
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2LS0FRBQG
[CLASS] image
[BASECLASS] image
[OBJNAME] ImgLeftArrow
[PARENT] peme_sfsplitter
[START PROPERTIES]
BackStyle = 0
Height = 17
Left = 3
Name = "ImgLeftArrow"
Picture = ..\images\left.bmp
Top = 58
Width = 17
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
With This.Parent
	.Collapse (.F.)
	.Refresh()
EndWith 
ENDPROC
PROCEDURE Init
If PEME_IsVersion9()
	This.Anchor = 5
EndIf 

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.ToolTipText=this.Parent.cToolTipTextLeftArrow 
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2LS0FRBQE
[CLASS] image
[BASECLASS] image
[OBJNAME] ImgRightArrow
[PARENT] peme_sfsplitter
[START PROPERTIES]
BackStyle = 0
Height = 17
Left = 3
Name = "ImgRightArrow"
Picture = ..\images\right.bmp
Top = 39
Width = 17
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
With This.Parent
	.Collapse (.T.)
	.Refresh()
EndWith 
ENDPROC
PROCEDURE Init
If PEME_IsVersion9()
	This.Anchor = 5
EndIf 

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.ToolTipText=this.Parent.cToolTipTextRightArrow 
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] RESERVED  
[CLASS] image
[BASECLASS] image
[OBJNAME] imgUpArrow
[PARENT] peme_sfsplitter
[START PROPERTIES]
BackStyle = 0
Height = 21
Left = 2
Name = "imgUpArrow"
Picture = ..\images\uparrow.bmp
Top = 193
Width = 21
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
With This.Parent
	.Collapse (.F.)
	.Refresh()
EndWith 
ENDPROC
PROCEDURE Init
If PEME_IsVersion9()
	This.Anchor = 5
EndIf 

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.ToolTipText=this.Parent.cToolTipTextUpArrow 
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] peme_sfsplitter

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2EM0LKWZR
[CLASS] peme_sfsplitter
[CLASSLOC] peme_sfsplitter.vcx
[BASECLASS] control
[OBJNAME] peme_sfsplitterh
[START PROPERTIES]
ImgLeftArrow.Height = 17
ImgLeftArrow.Name = "ImgLeftArrow"
ImgLeftArrow.Width = 17
ImgRightArrow.Height = 17
ImgRightArrow.Name = "ImgRightArrow"
ImgRightArrow.Width = 17
MousePointer = 9
Name = "peme_sfsplitterh"
gripperhor.Height = 5
gripperhor.Name = "gripperhor"
gripperhor.Width = 21
gripperver.Height = 21
gripperver.Name = "gripperver"
gripperver.Width = 5
imgDownArrow.Height = 21
imgDownArrow.Name = "imgDownArrow"
imgDownArrow.Width = 21
imgUpArrow.Height = 21
imgUpArrow.Name = "imgUpArrow"
imgUpArrow.Width = 21
nanchor = 13
[END PROPERTIES]
[START METHODS]
PROCEDURE adjustminimum
* Don't allow the form to be sized smaller than the left object should be.

local laObjects[1], ;
	lnObjects, ;
	lnWidth, ;
	lnI, ;
	loObject
with This
	lnObjects = alines(laObjects, .cObject1Name, 4, ',')
	lnWidth   = -1
	for lnI = 1 to lnObjects
		loObject = evaluate('.Parent.' + laObjects[lnI])
		lnWidth  = max(lnWidth, loObject.Width)
	next lnI
	If 'N' # Vartype (This.nOriginalMinimum)
		This.nOriginalMinimum = Thisform.MinWidth
	EndIf 
	Thisform.MinWidth = max(This.nOriginalMinimum, Thisform.Width - lnWidth + ;
		.nObject1MinSize)
endwith

ENDPROC
PROCEDURE getobject1size
lparameters toObject
return toObject.Left + This.nObject1MinSize

ENDPROC
PROCEDURE getobject2size
lparameters toObject
return toObject.Left + toObject.Width - This.nObject2MinSize - This.Width

ENDPROC
PROCEDURE getposition
lparameters tnXCoord, ;
	tnYCoord
return tnXCoord + This.Left - Objtoclient(this,2)

ENDPROC
PROCEDURE moveobject1
lparameters toObject
with toObject
	.Move(.Left, .Top, This.Left - .Left, .Height)
endwith

ENDPROC
PROCEDURE moveobject2
lparameters toObject
with toObject
	.Move(This.Left + This.Width, .Top, max(.Width + .Left - This.Left - ;
		This.Width, 0), .Height)
endwith

ENDPROC
PROCEDURE setposition
lparameters tnPosition
This.Left = tnPosition

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] peme_sfsplitterh

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2IL0N3Z4E
[CLASS] peme_sfsplitter
[CLASSLOC] peme_sfsplitter.vcx
[BASECLASS] control
[OBJNAME] peme_sfsplitterv
[START PROPERTIES]
Height = 10
ImgLeftArrow.Height = 17
ImgLeftArrow.Name = "ImgLeftArrow"
ImgLeftArrow.Width = 17
ImgRightArrow.Height = 17
ImgRightArrow.Name = "ImgRightArrow"
ImgRightArrow.Width = 17
MousePointer = 7
Name = "peme_sfsplitterv"
Width = 200
gripperhor.Height = 5
gripperhor.Name = "gripperhor"
gripperhor.Width = 21
gripperver.Height = 21
gripperver.Name = "gripperver"
gripperver.Width = 5
imgDownArrow.Height = 21
imgDownArrow.Name = "imgDownArrow"
imgDownArrow.Width = 21
imgUpArrow.Height = 21
imgUpArrow.Name = "imgUpArrow"
imgUpArrow.Width = 21
nanchor = 14
[END PROPERTIES]
[START METHODS]
PROCEDURE adjustminimum
* Don't allow the form to be sized smaller than the top object should be.

local laObjects[1], ;
	lnObjects, ;
	lnHeight, ;
	lnI, ;
	loObject
with This
	lnObjects = alines(laObjects, .cObject1Name, 4, ',')
	lnHeight  = -1
	for lnI = 1 to lnObjects
		loObject = evaluate('.Parent.' + laObjects[lnI])
		lnHeight = max(lnHeight, loObject.Height)
	next lnI
	If 'N' # Vartype (This.nOriginalMinimum)
		This.nOriginalMinimum = Thisform.MinHeight
	EndIf 
	Thisform.MinHeight = max(This.nOriginalMinimum, Thisform.Height - lnHeight + ;
		.nObject1MinSize)
endwith

ENDPROC
PROCEDURE getobject1size
lparameters toObject
return toObject.Top + This.nObject1MinSize

ENDPROC
PROCEDURE getobject2size
lparameters toObject
return toObject.Top + toObject.Height - This.nObject2MinSize - This.Height

ENDPROC
PROCEDURE getposition
lparameters tnXCoord, ;
	tnYCoord
return tnYCoord + This.Top - Objtoclient(this,1)

ENDPROC
PROCEDURE moveobject1
lparameters toObject
with toObject
	.Move(.Left, .Top, .Width, This.Top - .Top)
endwith

ENDPROC
PROCEDURE moveobject2
lparameters toObject
with toObject
	.Move(.Left, This.Top + This.Height, .Width, max(.Height + .Top - This.Top - ;
		This.Height, 0))
endwith

ENDPROC
PROCEDURE setposition
lparameters tnPosition
This.Top = tnPosition

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] peme_sfsplitterv
[EOF]
