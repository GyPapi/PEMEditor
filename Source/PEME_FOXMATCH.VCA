SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _3R50Y7DCA
[CLASS] matchengine
[CLASSLOC] peme_foxmatch.vcx
[BASECLASS] custom
[OBJNAME] matchclass
[START PROPERTIES]
Name = "matchclass"
_memberdata = <VFPData><memberdata name="oregexp" display="oRegExp"/></VFPData>
oregexp = .NULL.
[END PROPERTIES]
[START METHODS]
PROCEDURE Init
Local loRegExp As 'VBScript.RegExp'

DoDefault()

loRegExp = Createobject ('VBScript.RegExp')
With loRegExp
	.IgnoreCase	= .T.
	.Global		= .T.
	.MultiLine	= .T.
Endwith

This.oRegExp = loRegExp
ENDPROC
PROCEDURE searchfor
Local lcClass, lcExt, lcParent, lcParentLoc, lcText, lcValue, lnEndRange, lnI, lnStartRange, loMatch
Local loMatches, ltTimeStamp

lcExt = Upper(Justext(This.FileName))

Do Case
	Case lcExt = 'VCX'

		Select (Select('VCX'))
		Use (This.FileName) Shared Again Alias VCX

		Scan For Lower(Reserved1) = 'class' And Not Deleted()
			If Empty(This.SearchBaseClass) Or Lower(BaseClass) = This.SearchBaseClass
				If Empty (This.ClassSearch) Or Lower (This.ClassSearch) $ Lower(objname)
					If (Not This.ClassExactMatch) Or Lower (This.ClassSearch) == Lower(objname)

						This.AddMatch (This.DecodeTimeStamp(Timestamp), objname, Class, ClassLoc, BaseClass)

					Endif
				Endif
			Endif
		Endscan

		Use

	Case lcExt = 'PRG'
		lcText				 = Filetostr(This.FileName)
		This.oRegExp.Pattern = '^s*define class.*$'
		loMatches			 = This.oRegExp.Execute(lcText)

		ltTimeStamp = Fdate(This.FileName, 1)

		If loMatches.Count = 0
			Return
		Endif

		For lnI = 1 To loMatches.Count
			loMatch		 = loMatches.Item[lnI - 1]

			lcValue		= loMatch.Value
			lcClass		= Getwordnum(lcValue, 3)
			lcParent	= Getwordnum(lcValue, 5)
			lcParentLoc	= Getwordnum(lcValue, 7)

			If Empty (This.ClassSearch) Or Lower (This.ClassSearch) $ Lower(lcClass)
				If (Not This.ClassExactMatch) Or Lower (This.ClassSearch) == Lower(lcClass)

					lnStartRange = loMatch.FirstIndex + At(lcClass, lcValue)
					lnEndRange	 = lnStartRange + Len(lcClass)

					This.AddMatch (ltTimeStamp, lcClass, lcParent, lcParentLoc, '', lnStartRange, lnEndRange)
				Endif
			Endif
		Endfor && lnI = 1 to loMatches.Count

Endcase

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
oregexp
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] matchclass

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _3R50Y6E7V
[CLASS] matchengine
[CLASSLOC] peme_foxmatch.vcx
[BASECLASS] custom
[OBJNAME] matchdefault
[START PROPERTIES]
Name = "matchdefault"
[END PROPERTIES]
[START METHODS]
PROCEDURE searchfor
This.AddMatch()
ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] matchdefault

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _3R50Y3OT2
[CLASS] custom
[BASECLASS] custom
[OBJNAME] matchengine
[START PROPERTIES]
Name = "matchengine"
_memberdata =      705<VFPData><memberdata name="addmatch" display="AddMatch"/><memberdata name="classsearch_assign" display="ClassSearch_Assign"/><memberdata name="decodetimestamp" display="DecodeTimeStamp"/><memberdata name="getclassfilename" display="GetClassFileName"/><memberdata name="searchbaseclass_assign" display="SearchBaseClass_Assign"/><memberdata name="searchfor" display="SearchFor"/><memberdata name="classexactmatch" display="ClassExactMatch"/><memberdata name="classsearch" display="ClassSearch"/><memberdata name="filename" display="FileName"/><memberdata name="name" display="Name"/><memberdata name="searchbaseclass" display="SearchBaseClass"/><memberdata name="searchtype" display="SearchType"/></VFPData>
classexactmatch = .F.
classsearch = 
filename = 
searchbaseclass = 
searchtype = 
[END PROPERTIES]
[START METHODS]
PROCEDURE addmatch
LPARAMETERS ttTimeStamp, tcClass, tcParentClass, tcClassLoc, tcBaseClass, tnStartRange, tnEndRange

ltTimeStamp	  = Evl (ttTimeStamp, Fdate (This.FileName, 1))
lcClass		  = Evl (tcClass, '')
lcParentClass = Evl (tcParentClass, '')
If Empty (Evl (tcClassLoc, ''))
	lcClassLoc		= ''
Else
	lcClassLoc		= This.GetClassFileName(tcClassLoc, This.FileName)
Endif
lcBaseClass		= Evl (tcBaseClass, '')

Insert Into ResultsTable	(			;
	  SearchType,						;
	  FullName,							;
	  Class,							;
	  Folder,							;
	  FileName,							;
	  Parent,							;
	  ClassLoc,							;
	  BaseClass,						;
	  Timestamp,						;
	  StartRange,						;
	  EndRange							;
	  )									;
	Values								;
	(									;
	  This.SearchType,					;
	  This.FileName,					;
	  lcClass,							;
	  Justpath(This.FileName),			;
	  Justfname(This.FileName),			;
	  lcParentClass,					;
	  lcClassLoc,						;
	  lcBaseClass,						;
	  ltTimeStamp,						;
	  Evl(tnStartRange, 0),				;
	  Evl(tnEndRange, 0)				;
	  )
ENDPROC
PROCEDURE classsearch_assign
LPARAMETERS lcNewValue
This.ClassSearch = Alltrim (Lower (lcNewValue))
ENDPROC
PROCEDURE decodetimestamp
LPARAMETERS nTimestamp

Local nDate, nDay, nHr, nMin, nMonth, nSec, nTime, nYear

nDate = Bitrshift(nTimestamp, 16)
nTime = Bitand(nTimestamp, 2^16 - 1)

nYear  = Bitand(Bitrshift(nDate, 9), 2^8 - 1) + 1980
nMonth = Bitand(Bitrshift(nDate, 5), 2^4 - 1)
nDay   = Bitand(nDate, 2^5 - 1)

nHr	 = Bitand(Bitrshift(nTime, 11), 2^5 - 1)
nMin = Bitand(Bitrshift(nTime, 5), 2^6 - 1)
nSec = Bitand(nTime, 2^5 - 1)

Return Datetime(nYear, nMonth, nDay, nHr, nMin, nSec)

ENDPROC
PROCEDURE getclassfilename
Lparameters tcClassLoc, tcPath

*** JRN 02/24/2009 : per Doug ... handles cases of absolute paths and relative to current directory

Do Case
	Case ':' $ tcClassLoc
		Return tcClassLoc

	Case File( Fullpath( m.tcClassLoc, m.tcPath ) )
		Return Fullpath(tcClassLoc, tcPath)

	Otherwise
		Return Fullpath( m.tcClassLoc )
Endcase

ENDPROC
PROCEDURE searchbaseclass_assign
LPARAMETERS lcNewValue
If lcNewValue = '<'
	This.SearchBaseClass = ''
Else
	This.SearchBaseClass = Alltrim (Lower (lcNewValue))
Endif
ENDPROC
PROCEDURE searchfor
Return .T.
ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*addmatch 
*classsearch_assign 
*decodetimestamp 
*getclassfilename 
*searchbaseclass_assign 
*searchfor 
_memberdata XML Metadata for customizable properties
classexactmatch
classsearch
filename
searchbaseclass
searchtype
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START USER]
VCD4PRG
Handle = 50969396JustFName = peme_foxmatch.prgClass = MatchEngineDefine = Define Class MatchEngine As Custom
 Name FileName SearchType ClassSearch ClassExactMatch SearchBaseClass SearchFor AddMatch  SearchBaseClass_Assign  ClassSearch_Assign  DecodeTimeStamp  GetClassFileName 

[END USER]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] matchengine
[EOF]
